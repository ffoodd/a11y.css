@charset "UTF-8";


/*doc
---
title: "Retrieve message from translation map"
name: set-minimum-level
category: Docs
subcategory: Mixins
---

### Source

``` scss
@mixin set-minimum-level($level) {
  $level: to-lower-case($level);
  $levels: map-keys($themes);

  @if not index($levels, $level) {
    $default-level: nth($levels, -1);
    $level: $default-level;

    @warn 'Level `#{$level}` does not exist. '
      + 'Please choose one of `#{inspect($levels)}`. '
      + 'Falling back on `#{$default-level}`';
  }

  $minimum-level: $level !global;
}
```

### Description

Defines the minimum level used by `a11y.css`.

Either:
* `error` for errors only;
* `warning` for errors and warnings;
* `obsolete` for everything but advices;
* `advice` for everything.

### Parameters

| Name     | Description                                       | Type     | Default value |
| -------- | ------------------------------------------------- | -------- | ------------- |
| `$level` | Either `advice`, `error`, `warning` or `obsolete` | `String` | —             |

### Example

``` scss
@include set-minimum-level('error');
```
*/
@mixin set-minimum-level($level) {
  $level: to-lower-case($level);
  $levels: map-keys($themes);

  @if not index($levels, $level) {
    $default-level: nth($levels, -1);
    $level: $default-level;

    @warn 'Level `#{$level}` does not exist. '
      + 'Please choose one of `#{inspect($levels)}`. '
      + 'Falling back on `#{$default-level}`';
  }

  $minimum-level: $level !global;
}


/*doc
---
title: "Get a message"
name: message
category: Docs
subcategory: Mixins
---

### Source

``` scss
@mixin message($theme, $key) {
  content: replace-attr(quote("#{message($theme, $key)}")) !important;
}
```

### Description

Get a message from the translation map based on the defined language.

### Parameters

| Name     | Description                                       | Type     | Default value |
| -------- | ------------------------------------------------- | -------- | ------------- |
| `$theme` | Either `advice`, `error`, `warning` or `obsolete` | `String` | —             |
| `$key`   | Message name. Should match a test identifier.     | `String` | —             |

### Output

`content` property, with `!important`.

### Example

``` scss
.selector {
  @include message('advice', 'nav');
}
```

``` css
.selector {
  content: 'Did you know the <nav> tag is exclusively restricted to primary and secondary navigation area?';
}
```
*/
@mixin message($theme, $key) {
  content: replace-attr(quote("#{message($theme, $key)}")) !important;
}


/*doc
---
title: "Extends selector with void tags"
name: void-tags
category: Docs
subcategory: Mixins
---

### Source

``` scss
@mixin void-tags {
  @at-root #{selector-unify($void-tags, &)} {
    @content;
  }
}

```

### Description

Extends selector with self-closing tags & replaced elements.
Notice the `&` before the selector, and `$self-closing: true` argument.

### Output

`selectors` extended with void tags.

### Example

``` scss
.selector {
  @include advice('nav')

  @include void-tags {
    @include advice('nav', $self-closing: true);
  }
}
```

``` css
area .selector, base .selector, br .selector, col .selector, command .selector, embed .selector, hr .selector, img .selector, input .selector, keygen .selector, link .selector, meta .selector, param .selector, source .selector, track .selector, wbr .selector, textarea .selector, select .selector, svg .selector, audio .selector, video .selector, iframe .selector {
  content: "Did you know the <nav> tag is exclusively restricted to primary and secondary navigation area?";
}
```
*/
@mixin void-tags {
  @at-root #{selector-unify($void-tags, &)} {
    @content;
  }
}


/*doc
---
title: "Defines a test message"
name: item
category: Docs
subcategory: Mixins
---

### Source

``` scss
@mixin item($theme, $key, $self-closing: false, $head: false) {
  $message-key: $theme + ':' + $key;
  $is-disabled: index($disabled-tests, $message-key);

  @if is-level-enough($theme) and not $is-disabled {
    @include a11y($theme, $key, $self-closing, $head);
  }
}
```

### Description

Theme mixin including everything needed for the `$theme`, and checking test is not disabled.

### Parameters

| Name            | Description                                                | Type      | Default value |
| --------------- | ---------------------------------------------------------- | --------- | ------------- |
| `$theme`        | Either `advice`, `error`, `warning` or `obsolete`          | `String`  | —             |
| `$key`          | Key used to fetch message in `$messages` map.              | `String`  | —             |
| `$self-closing` | Whether to use message on self or on next node.            | `Boolean` | `false`       |
| `$head`         | Whether or not a self-closing tag sits in document's head. | `Boolean` | `false`       |
*/
@mixin item($theme, $key, $self-closing: false, $head: false) {
  $message-key: $theme + ':' + $key;
  $is-disabled: index($disabled-tests, $message-key);

  @if is-level-enough($theme) and not $is-disabled {
    @include a11y($theme, $key, $self-closing, $head);
  }
}


/*doc
---
title: "Defines an error"
name: error
category: Docs
subcategory: Mixins
---

### Source

``` scss
@mixin error($key, $self-closing: false, $head: false) {
  @include item('error', $key, $self-closing, $head);
}
```

### Description

Level related mixins use `item()` mixin with a hardcoded theme name.

### Parameters

| Name            | Description                                                | Type      | Default value |
| --------------- | ---------------------------------------------------------- | --------- | ------------- |
| `$key`          | Key used to fetch message in `$messages` map.              | `String`  | —             |
| `$self-closing` | Whether to use message on self or on next node.            | `Boolean` | `false`       |
| `$head`         | Whether or not a self-closing tag sits in document's head. | `Boolean` | `false`       |

### Example

``` scss
.selector {
  @include error("no-src");
}
```
*/
@mixin error($key, $self-closing: false, $head: false) {
  @include item('error', $key, $self-closing, $head);
}


/*doc
---
title: "Defines a warning"
name: warning
category: Docs
subcategory: Mixins
---

### Source

``` scss
@mixin warning($key, $self-closing: false, $head: false) {
  @include item('warning', $key, $self-closing, $head);
}
```

### Description

Level related mixins use `item()` mixin with a hardcoded theme name.

### Parameters

| Name            | Description                                                | Type      | Default value |
| --------------- | ---------------------------------------------------------- | --------- | ------------- |
| `$key`          | Key used to fetch message in `$messages` map.              | `String`  | —             |
| `$self-closing` | Whether to use message on self or on next node.            | `Boolean` | `false`       |
| `$head`         | Whether or not a self-closing tag sits in document's head. | `Boolean` | `false`       |

### Example

``` scss
.selector {
  @include warning("abbr");
}
```
*/
@mixin warning($key, $self-closing: false, $head: false) {
  @include item('warning', $key, $self-closing, $head);
}


/*doc
---
title: "Defines an obsolete thing"
name: obsolete
category: Docs
subcategory: Mixins
---

### Source

``` scss
@mixin obsolete($key, $self-closing: false, $head: false) {
  @include item('obsolete', $key, $self-closing, $head);
}
```

### Description

Level related mixins use `item()` mixin with a hardcoded theme name.

### Parameters

| Name            | Description                                                | Type      | Default value |
| --------------- | ---------------------------------------------------------- | --------- | ------------- |
| `$key`          | Key used to fetch message in `$messages` map.              | `String`  | —             |
| `$self-closing` | Whether to use message on self or on next node.            | `Boolean` | `false`       |
| `$head`         | Whether or not a self-closing tag sits in document's head. | `Boolean` | `false`       |

### Example

``` scss
.selector {
  @include obsolete("any");
}
```
*/
@mixin obsolete($key, $self-closing: false, $head: false) {
  @include item('obsolete', $key, $self-closing, $head);
}


/*doc
---
title: "Defines an advice"
name: advice
category: Docs
subcategory: Mixins
---

### Source

``` scss
@mixin advice($key, $self-closing: false, $head: false) {
  @include item('advice', $key, $self-closing, $head);
}
```

### Description

Level related mixins use `item()` mixin with a hardcoded theme name.

### Parameters

| Name            | Description                                                | Type      | Default value |
| --------------- | ---------------------------------------------------------- | --------- | ------------- |
| `$key`          | Key used to fetch message in `$messages` map.              | `String`  | —             |
| `$self-closing` | Whether to use message on self or on next node.            | `Boolean` | `false`       |
| `$head`         | Whether or not a self-closing tag sits in document's head. | `Boolean` | `false`       |

### Example

``` scss
.selector {
  @include advice("nav");
}
```
*/
@mixin advice($key, $self-closing: false, $head: false) {
  @include item('advice', $key, $self-closing, $head);
}


/*doc
---
title: "Disable specific tests"
name: disable-tests
category: Docs
subcategory: Mixins
---

### Source

``` scss
@mixin disable-tests($keys...) {
  @each $key in $keys {
    $disabled-tests: append($disabled-tests, $key) !global;
  }
}
```

### Description

Disable specific tests. Each test key should match an entry in locales `$messages` map,
made of a level and a test identifier separated by a double-colon, e.g. `error:tab-order`.

### Parameters

| Name    | Description               | Type   | Default value |
| ------- | ------------------------- | ------ | ------------- |
| `$keys` | Keys of tests to disable. | `List` | —             |

### Example

``` scss
@include disable-tests('error:tab-order', 'advice:empty-class');
```
*/
@mixin disable-tests($keys...) {
  @each $key in $keys {
    $disabled-tests: append($disabled-tests, $key) !global;
  }
}


/*doc
---
title: "Display messages on &lt;head>'s tags"
name: a11y-head
category: Docs
subcategory: Mixins
---

### Source

``` scss
@mixin a11y-head($self-closing: false) {
  // Because it's in the <head>
  @extend %a11y-head;

  @if $self-closing {
    ~ link:last-of-type {
      @extend %a11y-head;
    }
  }
}
```

### Description

Display messages on &lt;head>'s tags.

### Parameters

| Name            | Description                                         | Type      | Default value |
| --------------- | --------------------------------------------------- | --------- | ------------- |
| `$self-closing` | Whether to use message on self or on last `<link>`. | `Boolean` | `false`             |

### Example

``` scss
.selector {
  @include a11y-head();
}
```
*/
@mixin a11y-head($self-closing: false) {
  // Because it's in the <head>
  @extend %a11y-head;

  @if $self-closing {
    ~ link:last-of-type {
      @extend %a11y-head;
    }
  }
}


/*doc
---
title: "Display messages on &lt;head>'s tags"
name: base-content
category: Docs
subcategory: Mixins
---

### Source

``` scss
@mixin base-content($minimum-level) {
  $background: ();
  $content: ();

  // @note Line breaks can be triggered by «\A» within the message content.
  // @see issue #7, solution from @7studio
  @each $theme in map-keys($themes) {
    @if is-level-enough($theme) {
      $background-offset: theme-conf($theme, 'background-offset');
      $background-theme:
        transparent $background-offset,
        theme-conf($theme, 'color') $background-offset,
        theme-conf($theme, 'color') ($background-offset + 0.2em),
        transparent ($background-offset + 0.2em);
      $background: append($background, $background-theme, 'comma');
      $content-theme: quote(message('ui', $theme)) ': ' #{counter(unquote($theme))} '\A ';
      $content: append($content, $content-theme);
    }
  }

  background-image: linear-gradient(to bottom, transparent, $background, transparent 100%);
  content: $content;
}
```

### Description

Defines `body::after`’s `content` and `background-image` depending on `$minimum-level`.

### Parameters

| Name             | Description               | Type     | Default value |
| ---------------- | ------------------------- | -------- | ------------- |
| `$minimum-level` | Inheriting minimum level. | `String` | —             |

### Outputs

`content` and `background-image` on `body::after`.

### Example

``` scss
@include base-content($minimum-level);
```
*/
@mixin base-content($minimum-level) {
  $background: ();
  $content: ();

  // @note Line breaks can be triggered by «\A» within the message content.
  // @see issue #7, solution from @7studio
  @each $theme in map-keys($themes) {
    @if is-level-enough($theme) {
      $background-offset: theme-conf($theme, 'background-offset');
      $background-theme:
        transparent $background-offset,
        theme-conf($theme, 'color') $background-offset,
        theme-conf($theme, 'color') ($background-offset + 0.2em),
        transparent ($background-offset + 0.2em);
      $background: append($background, $background-theme, 'comma');
      $content-theme: quote(message('ui', $theme)) ': ' #{counter(unquote($theme))} '\A ';
      $content: append($content, $content-theme);
    }
  }

  background-image: linear-gradient(to bottom, transparent, $background, transparent 100%);
  content: $content;
}


/*doc
---
title: "Main mixin to display a message."
name: a11y
category: Docs
subcategory: Mixins
---

### Source

``` scss
@mixin a11y($theme, $key, $self-closing: false, $head: false) {
  @extend %a11y-#{$theme};

  $base-selector: '&::after';

  @if $self-closing {
    $base-selector: '& + ::before';
  }

  @if $head {
    $base-selector: '& ~ link:last-of-type::before';
  }

  #{$base-selector} {
    @extend %a11y-before;
    @include message($theme, $key);
    background: theme-conf($theme, 'color') !important;
    z-index: theme-conf($theme, 'index') !important;
  }
}
```

### Description

Main mixin to display a message.

### Parameters

| Name            | Description                                                 | Type      | Default value |
| --------------- | ----------------------------------------------------------- | --------- | ------------- |
| `$theme`        | Inheriting minimum level.                                   | `String`  | —             |
| `$key`          | Key used to fetch message in `$messages` map.               | `String`  | —             |
| `$self-closing` | Whether or not to use message on self or next node.         | `Boolean` | `false`       |
| `$head`         | Whether or not a self-closing tag sits in document's head.  | `Boolean` | `false`       |

### Example

``` scss
@include a11y($theme, $key, $self-closing, $head);
```
*/
@mixin a11y($theme, $key, $self-closing: false, $head: false) {
  @extend %a11y-#{$theme};

  $base-selector: '&::after';

  @if $self-closing {
    $base-selector: '& + ::before';
  }

  @if $head {
    $base-selector: '& ~ link:last-of-type::before';
  }

  #{$base-selector} {
    @extend %a11y-before;
    @include message($theme, $key);
    background: theme-conf($theme, 'color') !important;
    z-index: theme-conf($theme, 'index') !important;
  }
}

