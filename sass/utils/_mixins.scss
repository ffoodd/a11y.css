@charset 'UTF-8';

/// Defines the minimum level used by `a11y.css`.
/// Either:
/// * `error` for errors only;
/// * `warning` for errors and warnings;
/// * `obsolete` for everything but advices;
/// * `advice` for everything.
/// @access public
/// @param {String} $level
/// @output Nothing
/// @example scss - Defines the minimum level to `error` to display only errors.
///  @include set-minimum-level("error");
@mixin set-minimum-level($level) {
  $level: to-lower-case($level);
  $levels: map-keys($themes);

  @if not index($levels, $level) {
    @error 'Level `#{$level}` is not supported. Please choose one of `#{$levels}`.';
  }

  $minimum-level: $level !global;
}


/// Get a message from the translation map based on the defined language.
/// The message contains the icon associated to the message type.
/// @access private
/// @group messages
/// @param {String} $theme - Theme name
/// @param {String} $key - Key name
/// @require {function} message
/// @require $themes
/// @output `content`, with `!important`
/// @example scss - Get message for `nav` from `advice` category when language is set to `en`
/// .selector {
///   @include message("advice", "nav");
/// }
/// @example css - Resulting CSS
/// .selector {
///   content: "\2665\00A0 Did you know the <nav> tag is exclusively restricted to primary and secondary navigation area?";
/// }
@mixin message($theme, $key) {
  content: replace-attr(quote("#{unquote(theme-conf($theme, 'icon'))} #{message($theme, $key)}")) !important;
}


/// Extends selector with self-closing tags & replaced elements
/// Notice the `&` before the selector, and `$self-closing: true` argument.
/// @access private
/// @require {variable} void-tags
/// @output `selectors` extended with void tags
/// @example scss - Apply a test to void tags
///  @mixin void-tags {
///    &.selector {
///      @include advice"("nav", $self-closing: true);
///    }
///  }
/// @example css - `.selector` extended
///  area .selector, base .selector, br .selector, col .selector, command .selector, embed .selector, hr .selector, img .selector, input .selector, keygen .selector, link .selector, meta .selector, param .selector, source .selector, track .selector, wbr .selector, textarea .selector, select .selector, svg .selector, audio .selector, video .selector, iframe .selector {
///    content: "\2665\00A0 Did you know the <nav> tag is exclusively restricted to primary and secondary navigation area?";
///  }
@mixin void-tags {
  #{$void-tags} {
    @content;
  }
}


/// Theme mixin extending everything needed for the `$theme`,
/// and including a message in a pseudo-element.
/// @access private
/// @param {String} $theme - Theme
/// @param {String} $key - Key used to fetch message in `$messages` map
/// @param {Bool} $self-closing [false] - Whether or not to use message on self or next node
/// @param {Bool} $quarantine [false] - Whether or not to compile this single selector apart
/// @requires {mixin} message
/// @requires {function} theme-conf
@mixin item($theme, $key, $self-closing: false, $quarantine: false) {
  // If it's a self closing tag
  // Include message on next item
  @if $self-closing {
    @if $quarantine {
      @include quarantine-self-closing($theme);

      &::before,
      & ~ ::after {
        @include message($theme, $key);
      }
    } @else {
      @extend %a11y-#{$theme}-self-closing;

      &::before,
      & ~ ::after {
        @include message($theme, $key);
      }
    }
  } @else {
    @if $quarantine {
      @include quarantine($theme);

      &::before {
        @include message($theme, $key);
      }
    } @else {
      @extend %a11y-#{$theme};

      &::before {
        @include message($theme, $key);
      }
    }
  }
}


/// Defines an error
/// @group messages
/// @access public
/// @param {String} $key - Key used to fetch message in `$messages` map
/// @param {Bool} $self-closing [false] - Whether or not to use message on self or next node
/// @require {mixin} item
/// @require {variable} disabled-tests
/// @require {function} is-level-enough
/// @example scss - Define an error
/// .selector {
///   @include error("no-src");
/// }
@mixin error($key, $self-closing: false, $quarantine: false) {
  $is-disabled: index(map-get($disabled-tests, 'error'), $key);

  @if is-level-enough('error') and not $is-disabled {
    @include item('error', $key, $self-closing, $quarantine);
  }
}


/// Defines a warning
/// @group messages
/// @access public
/// @param {String} $key - Key used to fetch message in `$messages` map
/// @param {Bool} $self-closing [false] - Whether or not to use message on self or next node
/// @require {mixin} item
/// @require {variable} disabled-tests
/// @require {function} is-level-enough
/// @example scss - Define an warning
/// .selector {
///   @include warning("abbr");
/// }
@mixin warning($key, $self-closing: false, $quarantine: false) {
  $is-disabled: index(map-get($disabled-tests, 'warning'), $key);

  @if is-level-enough('warning') and not $is-disabled {
    @include item('warning', $key, $self-closing, $quarantine);
  }
}


/// Defines an obsolete thing
/// @group messages
/// @access public
/// @param {String} $key - Key used to fetch message in `$messages` map
/// @param {Bool} $self-closing [false] - Whether or not to use message on self or next node
/// @require {mixin} item
/// @require {variable} disabled-tests
/// @require {function} is-level-enough
/// @example scss - Define an obsolete
/// .selector {
///   @include obsolete("any");
/// }
@mixin obsolete($key, $self-closing: false, $quarantine: false) {
  $is-disabled: index(map-get($disabled-tests, 'obsolete'), $key);

  @if is-level-enough('obsolete') and not $is-disabled {
    @include item('obsolete', $key, $self-closing, $quarantine);
  }
}

/// Defines an advice
/// @group messages
/// @access public
/// @param {String} $key - Key used to fetch message in `$messages` map
/// @param {Bool} $self-closing [false] - Whether or not to use message on self or next node
/// @require {mixin} item
/// @require {variable} disabled-tests
/// @require {function} is-level-enough
/// @example scss - Define an advice
/// .selector {
///   @include advice("nav");
/// }
@mixin advice($key, $self-closing: false, $quarantine: false) {
  $is-disabled: index(map-get($disabled-tests, 'advice'), $key);

  @if is-level-enough('advice') and not $is-disabled {
    @include item('advice', $key, $self-closing, $quarantine);
  }
}


/// Disable specific errors tests
/// @group messages
/// @access public
/// @param {Arglist} $keys - Keys of tests to disable
/// @require $disabled-tests
/// @example scss - Disable a specific error test
///  @include disable-errors("tab-order")
@mixin disable-errors($keys...) {
  @each $key in $keys {
    $disabled-tests: map-merge($disabled-tests, ('error': append(map-get($disabled-tests, 'error'), $key))) !global;
  }
}

/// Disable specific advices tests
/// @group messages
/// @access public
/// @param {Arglist} $keys - Keys of tests to disable
/// @require $disabled-tests
/// @example scss - Disable a specific advice test
///  @include disable-advices("fake-button")
@mixin disable-advices($keys...) {
  @each $key in $keys {
    $disabled-tests: map-merge($disabled-tests, ('advice': append(map-get($disabled-tests, 'advice'), $key))) !global;
  }
}

/// Disable specific warnings tests
/// @group messages
/// @access public
/// @param {Arglist} $keys - Keys of tests to disable
/// @require $disabled-tests
/// @example scss - Disable a specific warning test
///  @include disable-warnings("figure-role")
@mixin disable-warnings($keys...) {
  @each $key in $keys {
    $disabled-tests: map-merge($disabled-tests, ('warning': append(map-get($disabled-tests, 'warning'), $key))) !global;
  }
}

/// Disable specific obsoletes tests
/// @group messages
/// @access public
/// @param {Arglist} $keys - Keys of tests to disable
/// @require $disabled-tests
/// @example scss - Disable a specific obsolete test
///  @include disable-obsolete("any")
@mixin disable-obsoletes($keys...) {
  @each $key in $keys {
    $disabled-tests: map-merge($disabled-tests, ('obsolete': append(map-get($disabled-tests, 'obsolete'), $key))) !global;
  }
}


/// Display messages on <head>'s tags
/// @group messages
/// @access public
/// @param {Arglist} $tag - Text to display, recommended: tag name
/// @param {Arglist} $theme - Message's level
/// @require {function} theme-conf
/// @example scss - Display messages on <head>'s tags
///  @include a11y-head("title", error)
@mixin a11y-head($tag, $theme) {
  // Because it's in the <head>
  display: block !important;

  &::after {
    content: $tag;

    background:   change_color(theme-conf($theme, 'color'), $saturation: 75%, $lightness: 95%) !important;
    border-color: change_color(theme-conf($theme, 'color'), $saturation: 50%, $lightness: 50%) !important;
    color:        change_color(theme-conf($theme, 'color'), $saturation: 50%, $lightness: 25%) !important;

    border-style: solid                                                   !important;
    border-width: 0 0 0 1px                                               !important;
    border-radius: 0                                                      !important;
    cursor: pointer;
    display: inline-block                                                 !important;
    padding: .5em 1em;

    position: fixed                                                       !important;
    bottom: auto                                                          !important;
    left: 1em                                                             !important;
    right: auto                                                           !important;
    top: 5em                                                              !important;

    font: 400
          normal
          1rem/1.5
          "Source Code Pro",
          "SourceCodePro-Medium",
          "Fira Mono",
          "Droid Sans Mono",
          "Ubuntu Mono",
          "Consolas",
          "Monaco",
          "Andale Mono",
          monospace                                                       !important;
    text-align: left                                                      !important;
    text-decoration: none                                                 !important;
    text-shadow: 0 1px 0 rgba( 255, 255, 255, .2 )                        !important;
    text-transform: none                                                  !important;
    white-space: pre;
  }
}


/// Defines `head::after`'s `content` and `background-image` depending on `$minimum-level`.
/// @param {String} $minimum-level - Inheriting minimum level
/// @output `content` and `background-image`
/// @access public
/// @require {function} theme-conf
/// @require {function} is-level-enough
/// @example scss - Display counters on <head>'s ::after
///  @include base-content($minimum-level);
@mixin base-content($minimum-level) {
  $background: ();
  $content: ();

  // @note Line breaks can be triggered by «\A» within the message content.
  // @see issue #7, solution from @7studio
  @each $theme in map-keys($themes) {
    @if is-level-enough($theme) {
      $background-offset: theme-conf($theme, 'background-offset');
      $background-theme:
        transparent $background-offset,
        theme-conf($theme, 'color') $background-offset,
        theme-conf($theme, 'color') ($background-offset + 0.2em),
        transparent ($background-offset + 0.2em);
      $background: append($background, $background-theme, 'comma');
      $content-theme: message('ui', $theme) ': ' #{counter(error)} '\A ';
      $content: append($content, $content-theme);
    }
  }

  background-image: linear-gradient(to bottom, transparent, $background, transparent 100%);
  content: $content;
}

