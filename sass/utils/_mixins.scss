@charset "UTF-8";

/// Defines the language used by `a11y.css`. For now, only `fr` and `en` allowed.
/// @group languages
/// @param {String} $language
/// @output Nothing
/// @example scss - Defines the language to `fr`.
///  @include set-locale('fr');
@mixin set-locale($language) {
  $supported-languages: 'fr', 'en';
  $language: to-lower-case($language);

  @if not index($supported-languages, $language) {
    @error "Language `#{$language}` is not supported. Pull request welcome!";
  }

  $language: $language !global;
}


/// Get a message from the translation map based on the defined language.
/// The message contains the icon associated to the message type.
/// @group languages
/// @param {String} $theme - Theme name
/// @param {String} $key - Key name
/// @require {function} message
/// @require $themes
/// @output `content`, with `!important`
/// @example scss - Get message for `nav` from `advice` category when language is set to `en`
/// .selector {
///   @include message('advice', 'nav');
/// }
/// @example css - Resulting CSS
/// .selector {
///   content: '\2665\00A0 Did you know the <nav> tag is exclusively restricted to primary and secondary navigation area?';
/// }
@mixin message($theme, $key) {
  content: quote(unquote(theme-conf($theme, 'icon')) #{message($theme, $key)}) !important;
}


/// Theme mixin extending everything for a message,
/// everything for the defined `$theme`,
/// and including a message in a pseudo-element.
/// @access private
/// @param {String} $theme - Theme
/// @param {String} $key - Key used to fetch message in `$messages` map
/// @param {Bool} $self-closing - Whether or not to use message on self or next node
@mixin theme($theme, $key, $self-closing: false) {
  // Extend CSS related to the theme
  @extend %a11y-#{$theme};

  // If it's a self closing tag
  // Include message on next item
  @if $self-closing {
    & ~ *::after {
      @include message($theme, $key);
      @extend %a11y-after;
      z-index: theme-conf($theme, 'index') !important;
    }

    &:hover ~ *::after {
      @extend %a11y-hover;
    }
  }

  @else {
    &::after {
      @include message($theme, $key);
      @extend %a11y-after;
    }

    &:hover::after {
      @extend %a11y-hover;
    }
  }
}


/// Defines an advice
/// @param {String} $key - Key used to fetch message in `$messages` map
/// @param {Bool} $self-closing - Whether or not to use message on self or next node
@mixin advice($key, $self-closing: false) {
  @include theme('advice', $key, $self-closing);
}


/// Defines an error
/// @param {String} $key - Key used to fetch message in `$messages` map
/// @param {Bool} $self-closing - Whether or not to use message on self or next node
@mixin error($key, $self-closing: false) {
  @include theme('error', $key, $self-closing);
}


/// Defines a warning
/// @param {String} $key - Key used to fetch message in `$messages` map
/// @param {Bool} $self-closing - Whether or not to use message on self or next node
@mixin warning($key, $self-closing: false) {
  @include theme('warning', $key, $self-closing);
}


/// Defines an obsolete thing
/// @param {String} $key - Key used to fetch message in `$messages` map
/// @param {Bool} $self-closing - Whether or not to use message on self or next node
@mixin obsolete($key, $self-closing: false) {
  @include theme('obsolete', $key, $self-closing);
}
