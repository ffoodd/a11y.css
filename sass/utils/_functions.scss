@charset "UTF-8";

/// Retrieve message from translation map.
/// @access private
/// @param {String} $theme - Either `advice`, `error`, `warning` or `obsolete`
/// @param {String} $key - Key to find message for
/// @return {String} Message
@function message($theme, $key) {
  $message-key: $theme + ':' + $key;

  @if not map-has-key($messages, $message-key) {
    @error 'No key `#{$message-key}` found.';
  }

  @return map-get($messages, $message-key);
}


/// Helper function to easily access a theme configuration.
/// @access private
/// @param {String} $theme
/// @param {String} $key
/// @return {*}
/// @example scss - Get color from error theme
/// .selector {
///   color: theme-conf('error', 'color');
/// }
/// @example css - Resulting CSS
/// .selector {
///   color: #911;
/// }
@function theme-conf($theme, $key) {
  @return map-get(map-get($themes, $theme), $key);
}


/// Test whether `$level` is high enough to be displayed.
/// @access private
/// @param {String} $level
/// @return {Boolean}
@function is-level-enough($level) {
  $levels: map-keys($themes);
  @return index($levels, $level) <= index($levels, $minimum-level);
}


/// Escaping CSS attr(..) function.
/// @access private
/// @param {String} $message
/// @return {String}
/// @example scss - Call message
/// .selector {
///   content: replace-attr("ARIA role attr(role) should be unique, but this one is the second!");
/// }
/// @example css - Escaped message
/// .selector {
///   content: "ARIA role " attr(role) "should be unique, but this one is the second!";
/// }
@function replace-attr($message) {
  $has-attr: str-index($message, 'attr(');
  $first-paren: str-index($message, ')');

  @if not $has-attr {
    @return $message;
  }

  $first-chunk: str-slice($message, 1, $has-attr - 1);
  $last-chunk: str-slice($message, $first-paren + 1);

  $result: ();

  @if str-length($first-chunk) > 0 {
    $result: append($result, $first-chunk);
  }

  $result: append($result, unquote(str-slice($message, $has-attr, $first-paren)));

  @if str-length($last-chunk) > 0 {
    $result: append($result, replace-attr($last-chunk));
  }

  @return $result;
}
