@charset 'UTF-8';


/*doc
---
title: "Invalid nesting in a list"
name: invalid-list-nesting
category: Warnings
---

##Description
The only child allowed in `<ul>` and `<ol>` is `<li>` - and the converse is also true.

##References
* <http://references.modernisation.gouv.fr/rgaa/criteres.html#crit-8-2>
* <http://www.w3.org/TR/WCAG20/#ensure-compat-parses>
* <http://www.w3.org/TR/WCAG20/#ensure-compat-rsv>
* <https://github.com/Heydon/REVENGE.CSS/blob/master/revenge.css#L313>
* <http://www.w3.org/TR/html5/grouping-content.html#the-li-element>

##Selector
```css_example
ul > :not(li),
ol > :not(li),
:not(ul):not(ol) > li
```

##Test
```html_example
<ul>
  <p>I feel like I'm lost.</p>
</ul>

<li>Mom? Where are you, Mom?</li>
```
*/
ul > :not(li),
ol > :not(li),
:not(ul):not(ol) > li {
  @include warning('invalid-list-nesting');
}


/*doc
---
title: "Invalid sibling in a definition list"
name: invalid-def
category: Warnings
---

##Description
`<dt>` and `<dd>` should be direct adjacent siblings, and nothing else. Although multiple `<dd>` may follow a single `<dt>`.

##References
* <http://references.modernisation.gouv.fr/rgaa/criteres.html#crit-8-2>
* <http://www.w3.org/TR/WCAG20/#ensure-compat-parses>
* <http://www.w3.org/TR/WCAG20/#ensure-compat-rsv>
* <https://github.com/Heydon/REVENGE.CSS/blob/master/revenge.css#L312>
* <http://www.w3.org/TR/html5/grouping-content.html#the-dl-element>

##Selector
```css_example
dt + :not(dd),
:not(dt):not(dd) + dd
```

##Test
```html_example
<dl>
  <li>I'm a list item.</li>
  <dd>What do I define?</dd>
</dl>

<dl>
  <dt>I need a definition, don't you think?</dt>
  <li>I'm a list item.</li>
</dl>
```
*/
dt + :not(dd),
:not(dt):not(dd) + dd {
  @include warning('invalid-def');
}


/*doc
---
title: "Invalid nesting in a definition list"
name: invalid-def-nesting
category: Warnings
---

##Description
`<dt>` and `<dd>` should be direct children of `<dl>`.
Any other imbrication may be a crime somewhere.

##References
* <http://references.modernisation.gouv.fr/rgaa/criteres.html#crit-8-2>
* <http://www.w3.org/TR/WCAG20/#ensure-compat-parses>
* <http://www.w3.org/TR/WCAG20/#ensure-compat-rsv>
* <https://github.com/Heydon/REVENGE.CSS/blob/master/revenge.css#L318>
* <http://www.w3.org/TR/html5/grouping-content.html#the-dl-element>

##Selector
```css_example
:not(dl) > dt,
:not(dl) > dd,
dl > :not(dt):not(dd)
```

##Test
```html_example
<dl>
  <li>I'm a list item.</li>
  <li>I'm another list item.</li>
</dl>

<dd>Look, Ma! No context for my definition!</dd>

<dl>
  <li>I'm a list item.</li>
</dl>

<dt>I'm a lost term.</dt>
```
*/
:not(dl) > dt,
:not(dl) > dd,
dl > :not(dt):not(dd) {
  @include warning('invalid-def-nesting');
}


/*doc
---
title: "figcaption outside a figure"
name: invalid-figcaption-nesting
category: Warnings
---

##Description
`<figcaption>` doesn't make sense outside a `<figure>`.

##References
* <http://references.modernisation.gouv.fr/rgaa/criteres.html#crit-8-2>
* <http://www.w3.org/TR/WCAG20/#ensure-compat-parses>
* <http://www.w3.org/TR/WCAG20/#ensure-compat-rsv>
* <http://www.w3.org/html/wg/drafts/html/master/grouping-content.html#the-figcaption-element>

##Selector
```css_example
:not(figure) > figcaption
```

##Test
```html_example
<figcaption>I'm captionning something, isn't it?</figcaption>
```
*/
:not(figure) > figcaption {
  @include warning('invalid-figcaption-nesting');
}


/*doc
---
title: "figure without the group ARIA role"
name: figure-role
category: Warnings
---

##Description
`<figure>` needs `[role="group"]` for accessibility reason.

##References
* <http://references.modernisation.gouv.fr/rgaa/criteres.html#crit-1-10>
* <http://www.w3.org/WAI/tutorials/images/decision-tree/>
* <http://www.w3.org/TR/html51/semantics.html#alt>

##Selector
```css_example
figure:not([role="group"])
```

##Test
```html_example
<figure>
  <img src="static/ffoodd.png" width="144" height="144" alt="Figcaption test"/>
  <figcaption>I'm a figcaption</figcaption>
</figure>
```
*/
figure:not([role="group"]) {
  @include warning('figure-role');
}


/*doc
---
title: "Invalid nesting"
name: invalid-nesting
category: Warnings
---

##Description
Some nestings are forbidden, and do not have their own test case for now:
* `<option>` and `<optgroup>` outside a `<select>`;
* `<legend>` outside a `<fieldset>`;
* `<td>` or `<th>` outside a `<tr>`;
* direct children of a `<table>`.

Maybe other invalid nestings to test. Stay tuned.

##Selector
```css_example
select > :not(option):not(optgroup),
:not(select):not(optgroup) > option,
optgroup > :not(option),
:not(select) > optgroup,
:not(fieldset) > legend,
tr > :not(td):not(th),
table > *:not(thead):not(tfoot):not(tbody):not(tr):not(colgroup):not(caption)
```

##Test
```html_example
<option>I'm an option. Am I?</option>
<legend>I'm an legend. Am I?</legend>
```
*/
select > :not(option):not(optgroup),
:not(select):not(optgroup) > option,
optgroup > :not(option),
:not(select) > optgroup,
:not(fieldset) > legend,
tr > :not(td):not(th),
table > *:not(thead):not(tfoot):not(tbody):not(tr):not(colgroup):not(caption) {
  @include warning('invalid-nesting');
}


/*doc
---
title: "Misplaced div"
name: misplaced-div
category: Warnings
---

##Description
Did you know that you shouldn't add a `<div>` inside any inline element?
You could use a `<span>` instead.

##References
* <https://github.com/Heydon/REVENGE.CSS/blob/master/revenge.css#L326>

##Selector
```css_example
b div,
i div,
q div,
em div,
abbr div,
cite div,
code div,
span div,
small div,
label div,
strong div
```

##Test
```html_example
<b><div>Hey ya!</div></b>
```
*/
b div,
i div,
q div,
em div,
abbr div,
cite div,
code div,
span div,
small div,
label div,
strong div {
  @include warning('misplaced-div');
}


/*doc
---
title: "Misused sectioning tags"
name: sectioning-tags
category: Warnings
---

##Description
`<section>`, `<aside>`, `<article>` are sectioning tags.
They must not be used as wrappers!

##References
* <https://github.com/Heydon/REVENGE.CSS/blob/master/revenge.css#L252>
* <http://www.w3.org/TR/html5/dom.html#sectioning-content>

##Selector
```css_example
aside > aside:first-child,
article > aside:first-child,
aside > article:first-child,
aside > section:first-child,
section > section:first-child,
article > section:first-child,
article > article:first-child
```

##Test
```html_example
<aside>
  <section>I'm wrapping, you know.</section>
</aside>
```
*/
aside > aside:first-child,
article > aside:first-child,
aside > article:first-child,
aside > section:first-child,
section > section:first-child,
article > section:first-child,
article > article:first-child {
  @include warning('sectioning-tags');
}


/*doc
---
title: "legend must be a fieldset's:first-child"
name: fieldset
category: Warnings
---

##Description
`<legend>` must be a `<fieldset>`'s`:first-child`.
Always.

##References
* <http://references.modernisation.gouv.fr/rgaa/criteres.html#crit-11-6>
* <http://www.w3.org/TR/WCAG20/#content-structure-separation-programmatic>
* <http://www.w3.org/TR/WCAG20/#minimize-error-cues>
* <https://github.com/Heydon/REVENGE.CSS/blob/master/revenge.css#L218>

##Selector
```css_example
fieldset > *:not(legend):first-child,
fieldset > legend:not(:first-child)
```

##Test
```html_example
<fieldset>
  <label>I'm not a legend.</label>
  <legend>I am legend.</legend>
</fieldset>
```
*/
fieldset > *:not(legend):first-child,
fieldset > legend:not(:first-child) {
  @include warning('fieldset');
}


/*doc
---
title: "abbr should have a [title]"
name: empty-title
category: Warnings
---

##Description
Any abbreviation should give an explanation about its meaning, at least on its first occurrence.

##References
* BP160 OpQuast
* <http://references.modernisation.gouv.fr/rgaa/criteres.html#crit-9-4>
* <http://www.w3.org/TR/WCAG20/#meaning-located>
* <http://www.w3.org/TR/WCAG-TECHS/G70.html>
* <http://www.w3.org/TR/WCAG-TECHS/G97.html>
* <http://www.w3.org/TR/WCAG-TECHS/G102.html>
* <http://www.w3.org/TR/WCAG-TECHS/H28.html>

##Selector
```css_example
abbr:not([title]),
abbr[title=" "],
abbr[title=""]
```

##Test
```html_example
<p>Do you know about <abbr>W3C</abbr>?</p>
```
*/
abbr:not([title]),
abbr[title=" "],
abbr[title=""] {
  @include warning('empty-title');
}


/*doc
---
title: "[alt] can be empty but has to be checked"
name: empty-alt
category: Warnings
---

##Description
An alternative has to be empty when image is decorative only. In any other case, `[alt]` must be defined.
That should be double-checked.

##References
* BP160 OpQuast
* <http://references.modernisation.gouv.fr/rgaa/criteres.html#crit-1-2>
* <http://www.w3.org/WAI/tutorials/images/decision-tree/>
* <http://www.w3.org/TR/html51/semantics.html#alt>
* <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#text-equiv-all>
* <http://www.w3.org/TR/WCAG-TECHS/H67.html>
* <http://www.w3.org/TR/WCAG-TECHS/F39.html>
* <http://www.w3.org/TR/WCAG-TECHS/F38.html>

##Selector
```css_example
img[alt=""],
area[alt=""],
input[type="image"][alt=""],
embed[type="image"][alt=""],
object[type="image"][alt=""]
```

##Test
```html_example
<img alt="" src="static/ffoodd.png" width="144" height="144" /><span>â€ </span>
```
*/
img[alt=""],
area[alt=""],
input[type="image"][alt=""] {
  @include warning('empty-alt', $self-closing: true);
}

embed[type="image"][alt=""],
object[type="image"][alt=""] {
  @include warning('empty-alt');
}


/*doc
---
title: "A label is needed for svg"
name: no-aria-label
category: Warnings
---

##Description
Any informative `<svg>` should either have a `[aria-label]`, `[aria-labelledby]` or a `<desc>` AND have a `[role="img"]`.

Otherwise it should have a `[role="presentation"]`, and should not have any of those:
* `[title]`;
* `[aria-label]`;
* `[aria-labelledby]`;
* `[aria-describedby]`;
* a `<title>` child;
* or a `<desc>`.

##References
* <http://references.modernisation.gouv.fr/rgaa/criteres.html#crit-1-1>
* <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#text-equiv-all>
* <http://www.w3.org/TR/WCAG-TECHS/F65.html>

##Selector
```css_example
svg:not([role="presentation"]):not([role="img"]):not([aria-label]):not([aria-labelledby])
```

##Test
```html_example
<svg width="12cm" height="4cm" viewBox="0 0 1200 400"
     xmlns="http://www.w3.org/2000/svg" version="1.1">
  <rect x="400" y="100" width="400" height="200"
        fill="forestgreen" stroke="darkgreen" stroke-width="10"  />
</svg><span>â€ </span>
```
*/
svg:not([role="presentation"]):not([role="img"]):not([aria-label]):not([aria-labelledby]) {
  @include warning('no-aria-label', $self-closing: true);
}


/*doc
---
title: "[autoplay] should probably not be used"
name: autoplay
category: Warnings
---

##Description
A time-based media like `<audio>` or `<video>` should not `[autoplay]`, because it can be quite surprising for the user.

##References
* <http://references.modernisation.gouv.fr/rgaa/criteres.html#crit-4-18>
* <http://references.modernisation.gouv.fr/rgaa/criteres.html#crit-13-17>
* <http://www.w3.org/TR/WCAG20/#visual-audio-contrast-dis-audio>
* <http://www.punkchip.com/autoplay-is-bad-for-all-users/>

##Selector
```css_example
video[autoplay],
audio[autoplay]
```

##Test
```html_example
<video autoplay controls src=""></video><span>â€ </span>
```
*/
video[autoplay],
audio[autoplay] {
  @include warning('autoplay', $self-closing: true);
}


/*doc
---
title: "[controls] would be helpful"
name: controls
category: Warnings
---

##Description
A time-based media like `<audio>` or `<video>` would be easier to use if `[controls]` are activated for the user.

##References
* <http://references.modernisation.gouv.fr/rgaa/criteres.html#crit-4-20>
* <http://www.w3.org/TR/WCAG20/#media-equiv-audio-desc>
* <http://www.w3.org/TR/WCAG20/#keyboard-operation-keyboard-operable>
* <http://www.w3.org/TR/WCAG20/#keyboard-operation-trapping>
* <http://www.w3.org/TR/WCAG-TECHS/G4.html>

##Selector
```css_example
video:not([controls]),
audio:not([controls])
```

##Test
```html_example
<video src=""></video><span>â€ </span>
```
*/
video:not([controls]),
audio:not([controls]) {
  @include warning('controls', $self-closing: true);
}


/*doc
---
title: "Most of DOM nodes shouldn't be :empty"
name: empty-nodes
category: Warnings
---

##Description
Obviously void elements are empty, as well as `<iframe>` and `<textarea>` could be `:empty`.
Any other `:empty` tag that is not hidden is probably useless, and should be deleted.

Please note that it's disabled for tags owning a source through `[src]`. It's pretty opinionated,
but it's meant to avoid false positives on tags such as `<video>` or `<audio>` which may be
empty if they have at least one source specified through `[src]`.

###Notes

* This test only targets tags in `<body>`, since most of head's tags should be empty.
* `<button>` and `<a>` are also excluded since `button:empty` and `a:empty` are both covered by their own error.
* We also use the `:blank` pseudo-class, but at this time its support is very poor.
* We also use the `:-moz-only-whitespace` pseudo-class, which is an alias of `:blank`.

##References
* <https://github.com/Heydon/REVENGE.CSS/blob/master/revenge.css#L243>
* <http://www.w3.org/TR/html-markup/syntax.html#void-element>
* <https://drafts.csswg.org/selectors-4/#the-blank-pseudo>
* <https://developer.mozilla.org/en-US/docs/Web/CSS/:-moz-only-whitespace>
* <https://css-tricks.com/almanac/selectors/b/blank/>

##Selector
```css_example
body *:empty:not([hidden]):not([aria-hidden]):not([src]):not(button):not(a):not(iframe):not(textarea):not(area):not(base):not(br):not(col):not(command):not(embed):not(hr):not(img):not(input):not(keygen):not(link):not(meta):not(param):not(source):not(track):not(wbr):not(title)
body *:blank:not([hidden]):not([aria-hidden]):not([src]):not(button):not(a):not(iframe):not(textarea):not(area):not(base):not(br):not(col):not(command):not(embed):not(hr):not(img):not(input):not(keygen):not(link):not(meta):not(param):not(source):not(track):not(wbr):not(title)
body *:-moz-only-whitespace:not([hidden]):not([aria-hidden]):not([src]):not(button):not(a):not(iframe):not(textarea):not(area):not(base):not(br):not(col):not(command):not(embed):not(hr):not(img):not(input):not(keygen):not(link):not(meta):not(param):not(source):not(track):not(wbr):not(title)
```

##Test
```html_example
<p id="empty-node_code"></p>

<p id="-moz-only-whitespace"> </p>
```
*/
/**
 * 1. An empty tag without dimensions isn't hoverable :/
 * @note Won't do anything for inline elements.
 */
body *:empty:not([hidden]):not([aria-hidden]):not([src]):not(button):not(a):not(iframe):not(textarea):not(area):not(base):not(br):not(col):not(command):not(embed):not(hr):not(img):not(input):not(keygen):not(link):not(meta):not(param):not(source):not(track):not(wbr):not(title) {
  @include warning('empty-nodes');
  /* 1 */
  min-height: 1px;
  min-width: 1px;
}

body *:blank:not([hidden]):not([aria-hidden]):not([src]):not(button):not(a):not(iframe):not(textarea):not(area):not(base):not(br):not(col):not(command):not(embed):not(hr):not(img):not(input):not(keygen):not(link):not(meta):not(param):not(source):not(track):not(wbr):not(title) {
  @include warning('empty-nodes', $self-closing: false);
  /* 1 */
  min-height: 1px;
  min-width: 1px;
}

body *:-moz-only-whitespace:not([hidden]):not([aria-hidden]):not([src]):not(button):not(a):not(iframe):not(textarea):not(area):not(base):not(br):not(col):not(command):not(embed):not(hr):not(img):not(input):not(keygen):not(link):not(meta):not(param):not(source):not(track):not(wbr):not(title) {
  @include warning('empty-nodes', $self-closing: false);
  /* 1 */
  min-height: 1px;
  min-width: 1px;
}

svg *:empty:not(title):not(desc):not([hidden]):not([aria-hidden]):not([src]):not(button):not(a):not(iframe):not(textarea):not(area):not(base):not(br):not(col):not(command):not(embed):not(hr):not(img):not(input):not(keygen):not(link):not(meta):not(param):not(source):not(track):not(wbr) {
  @include a11y-reset;
}


/*doc
---
title: "A single line table may be used for layout"
name: table-layout
category: Warnings
---

##Description
A lonely `<tr>` can be a symptom of a table used for layout.
Should be double checked!

##References
* <http://references.modernisation.gouv.fr/rgaa/criteres.html#crit-5-3>
* <http://www.w3.org/TR/WCAG20/#content-structure-separation-sequence>

##Selector
```css_example
table:not([role="presentation"]) > tr:only-child,
table:not([role="presentation"]) > tbody > tr:only-child
```

##Test
```html_example
<table>
  <caption>I'm a caption :3</caption>
  <tr>
    <td>I'm a poor lonesone table-roooow!</td>
  </tr>
</table>
```
*/
table:not([role="presentation"]) > tr:only-child,
table:not([role="presentation"]) > tbody > tr:only-child {
  @include warning('table-layout');
}


/*doc
---
title: "Every data table must have a caption"
name: table-caption
category: Warnings
---

##Description
`<caption>` is needed for data `<table>`.
And it must be the `:first-child`, by the way.

##References
* <http://references.modernisation.gouv.fr/rgaa/criteres.html#crit-5-4>
* <http://www.w3.org/TR/WCAG20/#content-structure-separation-programmatic>
* <http://www.w3.org/TR/html5/tabular-data.html#the-caption-element>
* <http://www.w3.org/TR/WCAG-TECHS/H39.html>

##Selector
```css_example
table:not([role="presentation"]) > caption:not(:first-child),
table:not([role="presentation"]) > *:first-child:not(caption)
```

##Test
```html_example
<table>
  <thead>
    <tr>
      <th id="th-one">I'm a table without a caption!</th>
      <th id="th-two">I'm a table without a caption!</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td colspan="2" headers="th-one th-two">I'm a table without a caption!</td>
    </tr>
    <tr>
      <td colspan="2" headers="th-one th-two">I'm a table without a caption!</td>
    </tr>
  </tbody>
</table>
```
*/
table:not([role="presentation"]) > caption:not(:first-child),
table:not([role="presentation"]) > *:first-child:not(caption) {
  @include warning('table-caption');
}


/*doc
---
title: "Invalid table structure"
name: table-structure
category: Warnings
---

##Description
`<thead>`, `<tfoot>` and `<tbody>` must be in this order.

##Selector
```css_example
table > tfoot ~ thead,
table > tbody ~ tfoot,
table > tbody ~ thead
```

##Test
```html_example
<table>
  <caption>I'm a caption</caption>
  <tbody>
    <tr>
      <td>I'm a table with tfoot done wrong.</td>
      <td>I'm a table with tfoot done wrong.</td>
    </tr>
    <tr>
      <td>I'm a table with tfoot done wrong.</td>
      <td>I'm a table with tfoot done wrong.</td>
    </tr>
  </tbody>
  <tfoot>
    <th id="th-1">I'm a table with tfoot done wrong.</th>
    <th id="th-2">I'm a table with tfoot done wrong.</th>
  </tfoot>
</table>
```
*/
table > tfoot ~ thead,
table > tbody ~ tfoot,
table > tbody ~ thead {
  @include warning('table-structure');
}


/*doc
---
title: "Missing head for data table"
name: missing-thead
category: Warnings
---

##Description
`<thead>` is strongly needed if `<tbody>` is present.

##Selector
```css_example
table:not([role="presentation"]) > caption + tbody,
table:not([role="presentation"]) > tbody:first-child
```

##Test
```html_example
<table>
  <caption>Missing thead</caption>
  <tbody>
    <tr>
      <td>I'm a table without thead.</td>
      <td>I'm a table without thead.</td>
    </tr>
    <tr>
      <td>I'm a table without thead.</td>
      <td>I'm a table without thead.</td>
    </tr>
  </tbody>
</table>
```
*/
table:not([role="presentation"]) > caption + tbody,
table:not([role="presentation"]) > tbody:first-child {
  @include warning('missing-thead');
}


/*doc
---
title: "th without [scope] or [id]"
name: th-no-scope
category: Warnings
---

##Description
`<th>` strongly needs an `[id]` or a `[scope]`.

##References
* <http://references.modernisation.gouv.fr/rgaa/criteres.html#crit-5-7>
* <http://www.w3.org/TR/WCAG20/#content-structure-separation-programmatic>
* <http://www.w3.org/TR/WCAG20-TECHS/H43.html>

##Selector
```css_example
th:not([scope]):not([id])
```

##Test
```html_example
<table>
  <caption>Need for a [scope] or [id]</caption>
  <tr>
    <th>I'm a th without [scope] or [id].</th>
    <th>I'm a th without [scope] or [id].</th>
  </tr>
  <tr>
    <td>I'm a td missing something.</td>
    <td>I'm a td missing something.</td>
  </tr>
</table>
```
*/
th:not([scope]):not([id]) {
  @include warning('th-no-scope');
}


/*doc
---
title: "spacer.gif used"
name: spacer-gif
category: Warnings
---

##Description
Believe me, this still have to be tested.

##References
* <http://www.la-grange.net/2015/03/11/visible>

##Selector
```css_example
img[src*="1px.gif"]:not([role="presentation"]),
img[src*="1x1.gif"]:not([role="presentation"]),
img[src*="clear.gif"]:not([role="presentation"]),
img[src*="spacer.gif"]:not([role="presentation"]),
img[src*="dotclear.gif"]:not([role="presentation"]),
img[src*="transparent.gif"]:not([role="presentation"]),
img[src*="pixel-1x1-clear.gif"]:not([role="presentation"])
```

##Test
```html_example
<img src="static/spacer.gif" alt="Spacer.gif" width="100" height="100"/><span>â€ </span>
```
*/
img[src*="1px.gif"]:not([role="presentation"]),
img[src*="1x1.gif"]:not([role="presentation"]),
img[src*="clear.gif"]:not([role="presentation"]),
img[src*="spacer.gif"]:not([role="presentation"]),
img[src*="dotclear.gif"]:not([role="presentation"]),
img[src*="transparent.gif"]:not([role="presentation"]),
img[src*="pixel-1x1-clear.gif"]:not([role="presentation"]) {
  @include warning('spacer-gif', $self-closing: true);
}


/*doc
---
title: "Bad computed value"
name: oops
category: Warnings
---

##Description
Don't laugh, shit happens.

##Selector
```css_example
[id*="NaN"],
[id*="null"],
[class*="NaN"],
[class*="null"],
[id*="undefined"],
[class*="undefined"]
```

##Test
```html_example
<p class="undefined">Oups, something went wrong.</p>
```
*/
[id*="NaN"],
[id*="null"],
[class*="NaN"],
[class*="null"],
[id*="undefined"],
[class*="undefined"] {
  @include warning('undefined');

  @include void-tags {
    @include warning('undefined', $self-closing: true);
  }
}


/*doc
---
title: "JS [href]"
name: href-js
category: Warnings
---

##Description
The `[href]` attribute should not start with "javascript".
Should probably be a `<button>` or at least a `[role="button"]`, don't you think?
The only exception shall be bookmarklets.

##References
* <https://github.com/Heydon/REVENGE.CSS/blob/master/revenge.css#L165>

##Selector
```css_example
a[href^="javascript"]:not([role="button"])
```

##Test
```html_example
<a href="javascript:(function(){a11ycss=document.createElement('LINK');a11ycss.href='https://rawgit.com/ffoodd/a11y.css/master/css/a11y-en.css';a11ycss.rel='stylesheet';a11ycss.media='all';document.body.appendChild(a11ycss);})();">Please use my bookmarklet ;)</a>
```
*/
a[href^="javascript"]:not([role="button"]) {
  @include warning('href-js');
}


/*doc
---
title: "# [href]"
name: empty-href
category: Warnings
---

##Description
The `[href]` attribute is only containing `#`.
Should probably be a `<button>` or at least a `[role="button"]`, don't you think?

##References
* <https://github.com/Heydon/REVENGE.CSS/blob/master/revenge.css#L165>

##Selector
```css_example
a[href="#"]:not([role="button"])
```

##Test
```html_example
<a href="#">Oh boy, I don't mean anything</a>
```
*/
a[href="#"]:not([role="button"]) {
  @include warning('empty-href');
}


/*doc
---
title: "[style] attribute"
name: style-attr
category: Warnings
---

##Description
Your styles should be driven by a CSS file. That's it.
And no, JS shouldn't manipulate styles: it's better to play with classes, for example.

##References
* <http://references.modernisation.gouv.fr/rgaa/criteres.html#crit-10-1->
* <http://www.w3.org/TR/WCAG20/#content-structure-separation-programmatic>
* <http://www.w3.org/TR/WCAG20/#content-structure-separation-sequence>

##Selector
```css_example
[style]
```

##Test
```html_example
<div style="color: red;">I'm red. I really feel dirty.</div>
```
*/
[style] {
  @include warning('style-attr');

  @include void-tags {
    @include warning('style-attr', $self-closing: true);
  }
}
